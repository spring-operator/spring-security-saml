<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2002-2019 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  ~
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

    <bean id="samlConfiguration"
          class="org.springframework.security.saml.boot.configuration.SamlBootConfiguration"/>

    <bean id="samlServiceProviderConfiguration"
          factory-bean="samlConfiguration"
          factory-method="samlServiceProviderConfiguration">
    </bean>

    <bean id="samlTransformer"
          class="org.springframework.security.saml.spi.opensaml.OpenSamlTransformer"/>

    <bean id="samlServiceProviderValidator"
          class="org.springframework.security.saml.provider.validation.DefaultServiceProviderValidator">
        <constructor-arg ref="samlTransformer"/>
    </bean>

    <bean id="samlServiceProviderMetadataResolver"
          class="org.springframework.security.saml.serviceprovider.metadata.DefaultServiceProviderMetadataResolver">
        <constructor-arg ref="samlTransformer"/>
    </bean>

    <bean id="samlServiceProviderConfigurationResolver"
          class="org.springframework.security.saml.serviceprovider.web.configuration.SingletonServiceProviderConfigurationResolver">
        <constructor-arg ref="samlServiceProviderConfiguration"/>
    </bean>

    <bean id="samlServiceProviderResolver"
          class="org.springframework.security.saml.serviceprovider.web.DefaultServiceProviderResolver">
        <constructor-arg ref="samlServiceProviderMetadataResolver"/>
        <constructor-arg ref="samlServiceProviderConfigurationResolver"/>
    </bean>

    <bean id="pathPrefix"
          factory-bean="samlServiceProviderConfiguration"
          factory-method="getPathPrefix"
          class="java.lang.String"
    />
    <bean id="samlMatcher"
          class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="#{'/' + pathPrefix + '/**'}"/>
    </bean>

    <bean id="metadataMatcher"
          class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="#{'/' + pathPrefix + '/metadata/**'}"/>
    </bean>

    <bean id="selectIdpMatcher"
          class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="#{'/' + pathPrefix + '/select/**'}"/>
    </bean>

    <bean id="idpDiscoveryMatcher"
          class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="#{'/' + pathPrefix + '/authenticate/**'}"/>
    </bean>

    <bean id="samlAuthenticationEntryPoint"
          class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg value="#{'/' + pathPrefix + '/select?redirect=true'}"/>
    </bean>

    <bean id="samlSpMetadataFilter"
          class="org.springframework.security.saml.serviceprovider.web.filters.ServiceProviderMetadataFilter">
        <constructor-arg ref="metadataMatcher"/>
        <constructor-arg ref="samlTransformer"/>
    </bean>

    <bean id="logoutMatcher"
          class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="#{'/' + pathPrefix + '/logout/**'}"/>
    </bean>

    <bean id="selectIdentityProviderUIFilter"
          class="org.springframework.security.saml.serviceprovider.web.filters.SelectIdentityProviderFilter">
        <constructor-arg ref="pathPrefix"/>
        <constructor-arg ref="selectIdpMatcher"/>
        <property name="redirectOnSingleProvider" value="false"/>
    </bean>

    <bean id="samlAuthenticationRequestFilter"
          class="org.springframework.security.saml.serviceprovider.web.filters.AuthenticationRequestFilter">
        <constructor-arg ref="idpDiscoveryMatcher"/>
        <constructor-arg ref="samlTransformer"/>
    </bean>

    <bean id="samlAuthenticationManager"
          class="org.springframework.security.saml.samples.NoOpAuthenticationManager"/>

    <bean id="samlWebSsoAuthenticationFilter"
          class="org.springframework.security.saml.serviceprovider.web.filters.WebSsoAuthenticationFilter">
        <constructor-arg>
            <bean class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
                <constructor-arg value="#{'/' + pathPrefix + '/SSO/**'}"/>
            </bean>
        </constructor-arg>
        <constructor-arg ref="samlServiceProviderValidator"/>
        <property name="authenticationManager" ref="samlAuthenticationManager"/>
        <property name="authenticationFailureHandler">
            <bean class="org.springframework.security.saml.serviceprovider.authentication.SamlAuthenticationFailureHandler"/>
        </property>
    </bean>

    <bean id="serviceProviderLogoutFilter"
          class="org.springframework.security.saml.serviceprovider.web.filters.ServiceProviderLogoutFilter">
        <constructor-arg ref="logoutMatcher"/>
        <constructor-arg ref="samlTransformer"/>
        <constructor-arg ref="samlServiceProviderValidator"/>
        <property name="logoutSuccessHandler">
            <bean class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
                <property name="defaultTargetUrl" value="#{'/' + pathPrefix + '/select'}"/>
            </bean>
        </property>
    </bean>

    <!-- BEGIN - the following two chains are used by integration tests -->
    <security:http pattern="/resources/**"
                   use-expressions="true"
                   entry-point-ref="samlAuthenticationEntryPoint"
                   authentication-manager-ref="samlAuthenticationManager">
        <security:intercept-url pattern="/**" access="isFullyAuthenticated()"/>
    </security:http>

    <security:http pattern="/test/**"
                   use-expressions="true"
                   entry-point-ref="samlAuthenticationEntryPoint"
                   authentication-manager-ref="samlAuthenticationManager">
        <security:intercept-url pattern="/**" access="isFullyAuthenticated()"/>
    </security:http>
    <!-- END - the previous two chains are used by integration tests -->

    <security:http pattern="/**"
                   use-expressions="true"
                   entry-point-ref="samlAuthenticationEntryPoint"
                   authentication-manager-ref="samlAuthenticationManager">
        <security:intercept-url pattern="#{'/' + pathPrefix + '/**'}" access="permitAll()"/>
        <security:intercept-url pattern="/error" access="permitAll()"/>
        <security:intercept-url pattern="/saml/sp/**" access="permitAll()" method="GET"/>
        <security:intercept-url pattern="/saml/sp/**" access="permitAll()" method="POST"/>
        <security:intercept-url pattern="/**" access="isFullyAuthenticated()"/>
        <security:custom-filter ref="samlSpMetadataFilter" position="DIGEST_AUTH_FILTER"/>
        <security:custom-filter ref="selectIdentityProviderUIFilter" after="DIGEST_AUTH_FILTER"/>
        <security:custom-filter ref="samlAuthenticationRequestFilter" before="BASIC_AUTH_FILTER"/>
        <security:custom-filter ref="samlWebSsoAuthenticationFilter" position="BASIC_AUTH_FILTER"/>
        <security:custom-filter ref="serviceProviderLogoutFilter" after="BASIC_AUTH_FILTER"/>
        <security:csrf request-matcher-ref="samlMatcher" disabled="true"/>
    </security:http>

</beans>
