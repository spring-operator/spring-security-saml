<?xml version="1.0" encoding="UTF-8"?>
<part id="configuration"
	xmlns="http://docbook.org/ns/docbook" version="5.0"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xl="http://www.w3.org/1999/xlink"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://docbook.org/ns/docbook https://www.docbook.org/xml/5.0/xsd/docbook.xsd
		http://www.w3.org/1999/xlink https://www.docbook.org/xml/5.0/xsd/xlink.xsd">	
  
		<title>Configuring SAML Extension</title>
		<partintro>
			<para>This chapter provides information about configuration and customization options of the SAML extension.
			It will guide you through typical scenarios including problems you might encounter during integration with
			identity providers.</para>
		</partintro>
    
	<chapter id="configuration-overview">
		<title>Overview</title>
		<para>Spring Security SAML 2.0 library comprises three modules:
			<itemizedlist spacing="compact">
				<listitem>
					<para>
						<emphasis>core</emphasis>
						contains implementation of the WebSSO profiles of the SAML 2.0 protocol and is required for
						integration to target systems.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>sample</emphasis>
						contains example of Spring configuration used for integration to target systems. It also
						contains user interface for generation and management of metadata.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis>docs</emphasis>
						contains this documentation.
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>Configuration of the library is done using Spring context XML. An example of configuration can be found
			under <emphasis>sample/src/main/webapp/WEB-INF/securityContext.xml</emphasis>.
			Setting up of the library typically involves these steps:
			<itemizedlist spacing="compact">
				<listitem>
					<para><link linkend="configuration-integration">integration to application using Spring XML configuration</link></para>
				</listitem>
				<listitem>
					<para><link linkend="configuration-metadata">import, generation and customization of SP and IDP metadata</link></para>
				</listitem>
				<listitem>
					<para><link linkend="configuration-key-management">configuration of signature, encryption and trust keys</link></para>
				</listitem>
				<listitem>
					<para><link linkend="configuration-security-profiles">configuration of security profiles</link></para>
				</listitem>
				<listitem>
					<para><link linkend="configuration-load-balancing">configuration of reverse proxy or load balancer</link></para>
				</listitem>
				<listitem>
					<para><link linkend="configuration-discovery">configuration of IDP selection or discovery</link></para>
				</listitem>
				<listitem>
					<para><link linkend="configuration-sso">configuration of single sign-on process</link></para>
				</listitem>
				<listitem>
					<para><link linkend="configuration-logout">configuration of logout process</link></para>
				</listitem>
				<listitem>
					<para><link linkend="configuration-authentication-object">configuration of authentication object</link></para>
				</listitem>
				<listitem>
					<para><link linkend="configuration-authentication-log">configuration of authentication log</link></para>
				</listitem>
			</itemizedlist>
		</para>
		<para>Additional steps such as customization of SAML 2.0 bindings, configuration of artifact resolution 
 or configuration of time skews might be needed.
		</para>
	</chapter>

	<chapter id="configuration-integration">
		<title>Integration to applications</title>
		<para>SAML module can be directly embedded into new or existing Spring applications. In
			this case application itself includes the SAML library in WEB-INF/lib directory of the war archive and
			processes all SAML interactions. The other option of using the SAML library is deploying it as a
			stand-alone module
			which transfers information about the authenticated user to the target application using a custom
			mechanism. This chapter only discusses the first option.
		</para>
		<section id="configuration-integration-maven">
			<title>Maven dependency</title>
			<para>
				In order to include the library and all its dependencies add the following dependency to your
				pom.xml file:
				<programlisting><![CDATA[<dependency>
	<groupId>org.springframework.security.extensions</groupId>
	<artifactId>spring-security-saml2-core</artifactId>
	<version>${version}</version>
</dependency>]]></programlisting>
			</para>
			<para>The current version of SAML Extension has been tested to work with Spring 3.1.2, Spring Security 3.1.2 and OpenSAML 2.6.1.
			Later versions of these libraries are likely to be compatible without need for modifications.</para>
		</section>
		<section id="configuration-integration-bean-definitions">
			<title>Bean definitions</title>
			<para>Configuration of the SAML library requires beans definitions included in the
				<emphasis>sample/src/main/webapp/WEB-INF/securityContext.xml</emphasis>
				configuration file. Include copy of the file in your own Spring application, either directly or with
				an inclusion. Configuration steps in the following chapters will be customizing beans included in
				the default context.
			</para>
			<para>Beans of the SAML library are using auto-wiring and annotation-based configuration by default.
				Make sure that your Spring configuration
				contains e.g. the following settings in order to enable support for these features:
				<programlisting><![CDATA[<context:annotation-config/>
<context:component-scan base-package="org.springframework.security.saml"/>
]]></programlisting>
				</para>
			</section>
			<section id="configuration-java">
			<title>Java-based configuration</title>
				<para>Spring SAML will include configuration classes for Spring Java-based configuration in future versions.</para>
				<para>For an example of <emphasis>securityContext.xml</emphasis> translated into Java configuration in a Spring Boot application see project by Vincenzo De Notaris at <ulink url="https://github.com/vdenotaris/spring-boot-security-saml-sample"/>.</para>
			</section>
			<section id="configuration-integration-spring-security">
				<title>Spring Security integration</title>
				<para>Filters of the SAML module need to be enabled as part of the Spring Security settings. In case
					SAML authentication should be the default authentication mechanism of the application set bean
					<emphasis>samlEntryPoint</emphasis>
					as the default entry point. Make sure that filter
					<emphasis>samlFilter</emphasis>
					is included as one of the custom filters. In case SP metadata should be
					generated automatically during first request to the application include also filter<emphasis>
						metadataGeneratorFilter</emphasis>.
					The configuration directive may for example look as follows:
					<programlisting><![CDATA[<security:http entry-point-ref="samlEntryPoint">
	<security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
	<security:custom-filter after="BASIC_AUTH_FILTER" ref="samlFilter"/>
</security:http>]]></programlisting>
			</para>
		</section>
        <section id="error-handling">
            <title>Error handling</title>
            <para>Critical errors raised during processing of SAML messages are generally propagated as ServletExceptions to the Java container. In order to configure a custom error handling update your web.xml
                and provide a general handler for ServletExceptions:<programlisting><![CDATA[<error-page>
	<exception-type>javax.servlet.ServletException</exception-type>
	<location>/error.jsp</location>
</error-page>]]></programlisting></para>
            <para>ServletException contains original reason for the failure as a cause. It is recommended that content of the exceptions is not displayed to end users, both for security and user experience reasons.</para>
            <para>Errors produced during processing of the SAML AuthenticationResponse can be handled by plugging a custom implementation of
                the <emphasis>org.springframework.security.web.authentication.AuthenticationFailureHandler</emphasis> interface to the <emphasis>samlWebSSOProcessingFilter</emphasis> bean.</para>
        </section>
        <section id="logging">
            <title>Logging</title>
            <para>SAML Extension uses <ulink url="https://www.slf4j.org/">SLF4J framework</ulink> for logging. The same applies to the underlying OpenSAML
                library. The sample application by default uses log4j version 1.2 binding for SLF4J, configured with the following dependency:<programlisting><![CDATA[<dependency>
	<groupId>org.slf4j</groupId>
	<artifactId>slf4j-log4j12</artifactId>
	<version>1.6.3</version>
	<scope>compile</scope>
</dependency>]]></programlisting></para>
            <para>To view the contents of SAML messages and errors from the logs, adjust the settings of the SAMLDefaultLogger bean.</para>
            <programlisting><![CDATA[<bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger">
       	<property name="logAllMessages" value="true"/>
    	<property name="logErrors" value="true"/>
    	<property name="logMessagesOnException" value="true"/>
	</bean>]]></programlisting>
            <para>In case you are using another logging library, make sure to change the dependency accordingly.</para>
            <para>You can enable debug logging by modifying file <emphasis>sample/src/main/resources/log4j.properties</emphasis> and adding:
                <programlisting>log4j.logger.org.springframework.security.saml=DEBUG
log4j.logger.org.opensaml=DEBUG
log4j.logger.PROTOCOL_MESSAGE=DEBUG</programlisting></para>
            <para>For details about using other logging frameworks please consult the <ulink url="https://www.slf4j.org/manual.html">SLF4J manual</ulink>.</para>
        </section>
	</chapter>

	<chapter id="configuration-metadata">
		<title>Metadata configuration</title>
		<para>
			SAML metadata is an XML document which contains information necessary for interaction with SAML-enabled identity
			or service providers. The document contains e.g. URLs of endpoints, information about supported bindings, identifiers and
			public keys. Typically one metadata document will be generated for your own service provider and sent to all identity providers
			you want to enable single sign-on with. Similarly, each identity provider will make its own metadata available for you to import
			into your service provider application.
		</para>
		<para>
			Each metadata document can contain definition for one or many identity or service providers and optionally can be digitally signed.
			Metadata can be customized either by direct modifications to the XML document, or using extended metadata. Extended metadata is added
			directly to the Spring configuration file and can contain additional options which are unavailable in the basic metadata document.
		</para>
		<section id="configuration-metadata-sp">
			<title>Service provider metadata</title>
			<para>Service provider metadata contains keys, services and URLs defining SAML endpoints of your application. Metadata can be either
			generated automatically upon first request to the service, or it can be pre-created (see <xref linkend="chapter-sample-app"/>).
			Once created metadata needs to be provided to the identity providers with whom we want to establish trust.</para>
			<section id="configuration-metadata-sp-generation">
				<title>Automatic metadata generation</title>
				<para>
					Automatic metadata generation is enabled by including the following filter in the Spring Security configuration:
					<programlisting><![CDATA[<security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>]]></programlisting>
				</para>
				<para>
					This filter is automatically invoked as part of the first request to a URL processed by Spring Security. In case there
					is no service provider metadata already specified (meaning property <emphasis>hostedSPName</emphasis> of the
					<emphasis>metadata</emphasis> bean is empty) filter will generate a new one.
				</para>
				<para>
					By default metadata will be generated with the following values which can be customized by setting properties of the <emphasis>metadataGenerator</emphasis> bean:
					<table id="configuration-metadata-sp-generation-default-values">
						<title>Metadata generator settings</title>
						<tgroup cols="3">
							<colspec colname="_1" colwidth="0.6*" align="left"/>
							<colspec colname="_2" colwidth="0.8*" align="left"/>
							<colspec colname="_2" colwidth="0.8*" align="left"/>
							<thead>
								<row>
									<entry>Property</entry>
									<entry>Description</entry>
									<entry>Default value</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry><literal>entityBaseURL</literal></entry>
									<entry>Base URL to construct SAML endpoints from, needs to be a URL with protocol, server, port and context path.</entry>
									<entry>Values from the request in format: <emphasis>scheme://server:port/contextPath</emphasis></entry>
								</row>
								<row>
									<entry><literal>entityId</literal></entry>
									<entry>Unique identifier of the service provider.</entry>
									<entry>&lt;entityBaseUrl&gt;/saml/metadata</entry>
								</row>
								<row>
									<entry><literal>id</literal></entry>
									<entry>XML identifier of the root metadata element referred in signature.</entry>
									<entry>entityId with removed illegal characters (NCName)</entry>
								</row>
								<row>
									<entry><literal>requestSigned</literal></entry>
									<entry>Flag indicating whether this service signs authentication requests.</entry>
									<entry>true</entry>
								</row>
								<row>
									<entry><literal>wantAssertionSigned</literal></entry>
									<entry>Flag indicating whether this service requires signed assertions.</entry>
									<entry>true</entry>
								</row>
								<row>
									<entry><literal>bindingsSSO</literal></entry>
									<entry>Bindings to be included in the metadata for WebSSO profile. Supported values are: POST, Artifact and PAOS. Order of bindings in the property determines order of endpoints in the generated metadata.</entry>
									<entry>POST, Artifact</entry>
								</row>
								<row>
									<entry><literal>bindingsHoKSSO</literal></entry>
									<entry>Bindings to be included in the metadata for WebSSO Holder-of-Key profile. Supported values are: POST and Artifact. Order of bindings in the property determines order of endpoints in the generated metadata.</entry>
									<entry></entry>
								</row>
								<row>
									<entry><literal>bindingsSLO</literal></entry>
									<entry>Bindings to be included in the metadata for Single Logout profile. Supported values are: POST and Redirect. Order of bindings in the property determines order of endpoints in the generated metadata.</entry>
									<entry>POST, Redirect</entry>
								</row>
								<row>
									<entry><literal>assertionConsumerIndex</literal></entry>
									<entry>Index of assertion consumer point to be marked as default.</entry>
									<entry>0</entry>
								</row>
								<row>
									<entry><literal>includeDiscoveryExtension</literal></entry>
									<entry>When true generated metadata will contain extension indicating that it's able to consume response from an IDP Discovery service.</entry>
									<entry>false</entry>
								</row>
								<row>
									<entry><literal>nameID</literal></entry>
									<entry>Name identifiers to be included in the metadata. Supported values are: EMAIL, TRANSIENT, PERSISTENT, UNSPECIFIED and X509_SUBJECT. Order of NameIDs in the property determines order of NameIDs in the generated metadata.</entry>
									<entry>EMAIL, TRANSIENT, PERSISTENT, UNSPECIFIED, X509_SUBJECT</entry>
								</row>
								<row>
									<entry><literal>extendedMetadata</literal></entry>
									<entry>Additional settings such as security keys, entity alias, metadata signing, IDP discovery, ECP settings, security profiles and signature requirements can be specified in the ExtendedMetadata, see <xref linkend="configuration-metadata-extended"/> for details.</entry>
									<entry>no extended metadata</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</para>
				<para>
					In case property <literal>entityBaseURL</literal> is not specified, it will be automatically generated based on values in the first HTTP request.
					Generated value can be normalized to exclude standard 80/443 ports for http/https schemes by setting property <literal>normalizeBaseUrl</literal> of the MetadataGeneratorFilter
					to <literal>true</literal>. It is recommended to provide the value explicitly in the configuration.
				</para>
				<para>
					Providing an empty collection or null value to properties <emphasis>bindingsSSO</emphasis>, <emphasis>bindingsHoKSSO</emphasis> and <emphasis>bindingsSLO</emphasis>
					will disable and remove the given profile. For example the following setting removes the holder-of-key profile from the generated metadata,
					forces artifact binding for single sign-on and redirect binding for single logout: <programlisting><![CDATA[<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
	<property name="bindingsSSO"><list><value>artifact</value></list></property>
	<property name="bindingsSLO"><list><value>redirect</value></list></property>
	<property name="bindingsHoKSSO"><list/></property>
</bean>]]></programlisting></para>
				<para>
					By default generated metadata will not be digitally signed. Digital signature can be enabled using property
					<literal>signMetadata</literal> of the <emphasis>extendedMetadata</emphasis> bean.
				</para>
				<para>
					In case application is deployed behind a reverse-proxy or other mechanism which makes the URL at the application server different
					from the URL seen by client at least property <literal>entityBaseURL</literal> should be set to a value e.g. https://www.server.com:8080
					For details about load balancing see <xref linkend="configuration-load-balancing"/>.
				</para>
			</section>
			<section id="configuration-metadata-sp-import">
				<title>Pre-configured metadata</title>
				<para>In some situations it is beneficial to provide static version of the metadata document instead of the automatic generation. Need
				for manual changes in the metadata or fixing of production settings are some of those. A custom metadata document describing local SP application
				can be added by updating the <emphasis>metadata</emphasis> bean with correct ExtendedMetadata. Please follow these steps
				in order to do so: <itemizedlist>
				  <listitem>
					  <para>Generate and download metadata, e.g. using the <emphasis>Metadata Administration -&gt; Generate new service provider metadata</emphasis> option in the sample application's administration UI or using instructions in <link linkend="configuration-metadata-sp-generation">automatic metadata generator</link>.</para>
				  </listitem>
				  <listitem>
					  <para>Store the metadata file as part of your project classpath, e.g. in <emphasis>WEB-INF/classes/metadata/localhost_sp.xml</emphasis>.</para>
				  </listitem>
				  <listitem>
					  <para>Disable the automatic metadata generator by removing the following custom filter from the <emphasis>securityContext.xml</emphasis>: <programlisting><![CDATA[<security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>]]></programlisting></para>
				  </listitem>
				  <listitem>
					  <para>Include the SP metadata in the <emphasis>metadata</emphasis> bean and mark the entity as <emphasis>local</emphasis> in the extended metadata. Make sure to specify the <emphasis>alias</emphasis>
					  property in case it was used during metadata generation.</para>
					  <para>It is recommended to use the administration UI which also generates all the Spring declarations ready for inclusion in your <emphasis>securityContext.xml</emphasis>.</para>
					  <para>Configuration for pre-configured local metadata can look for example like this: <programlisting><![CDATA[<bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
	<constructor-arg>
		<bean class="org.opensaml.saml2.metadata.provider.ResourceBackedMetadataProvider">
			<constructor-arg>
				<bean class="java.util.Timer"/>
			</constructor-arg>
			<constructor-arg>
				<bean class="org.opensaml.util.resource.ClasspathResource">
					<constructor-arg value="/metadata/localhost_sp.xml"/>
				</bean>
			</constructor-arg>
			<property name="parserPool" ref="parserPool"/>
		</bean>
	</constructor-arg>
	<constructor-arg>
		<bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
			<property name="local" value="true"/>
			<property name="securityProfile" value="metaiop"/>
			<property name="sslSecurityProfile" value="pkix"/>
			<property name="signMetadata" value="true"/>
			<property name="signingKey" value="apollo"/>
			<property name="encryptionKey" value="apollo"/>
			<property name="requireArtifactResolveSigned" value="false"/>
			<property name="requireLogoutRequestSigned" value="false"/>
			<property name="requireLogoutResponseSigned" value="false"/>
			<property name="idpDiscoveryEnabled" value="true"/>
			<property name="idpDiscoveryURL"
				value="https://www.server.com:8080/context/saml/discovery"/>
			<property name="idpDiscoveryResponseURL"
				value="https://www.server.com:8080/context/saml/login?disco=true"/>
		</bean>
	</constructor-arg>
</bean>]]></programlisting></para>
				  </listitem>
				</itemizedlist></para>
				<para>Same instance of your application can include multiple statically declared local service providers each differentiated by its own unique
				alias and entity ID, see <xref linkend="configuration-entity-alias"/> for details. In case your application defines multiple local service providers,
				set property <emphasis>hostedSPName</emphasis> of the <emphasis>metadata</emphasis> bean to the entity ID of the default one.</para>
				<para>The file with pre-configured metadata doesn't need to include digital signature. Metadata will be automatically signed during runtime when property <emphasis>signMetadata</emphasis> is set to <emphasis>true</emphasis>.</para>
				<para>For details about available settings of the ExtendedMetadata see <xref linkend="configuration-metadata-extended"/>.</para>
			</section>
			<section id="configuration-metadata-sp-display">
				<title>Downloading metadata</title>
				<para>Metadata describing the default local application can be downloaded from URL: <programlisting>https://www.server.com:8080/context/saml/metadata</programlisting></para>
				<para>In case the application is configured to contain multiple service providers metadata for each can be loaded by
				adding the alias: <programlisting>https://www.server.com:8080/context/saml/login/alias/defaultAlias</programlisting></para>
				<para>URL for metadata download can be disabled by removing filter <emphasis>metadataDisplayFilter</emphasis> from the <emphasis>securityContext.xml</emphasis>.</para>
				<para>Metadata is also available in the sample application's administration UI under <emphasis>Metadata information -&gt; selected SP</emphasis>.</para>
			</section>
		</section>
		<section id="configuration-metadata-idp">
			<title>Identity provider metadata</title>
			<para>Metadata for identity providers is imported to the <emphasis>metadataManager</emphasis> in a similar way as pre-configured
			SP metadata. Metadata containing one or many identity providers can be added by providing an URL or a file. Processing of metadata and
			processing of SAML messages can be customized using properties of ExtendedMetadataDelegate and ExtendedMetadata.</para>
			<section id="configuration-metadata-idp-file">
				<title>File-based metadata provider</title>
				<para>File-based provider loads metadata from a file available in the filesystem or classpath.<programlisting><![CDATA[<bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
	<constructor-arg>
		<bean class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
			<constructor-arg>
				<value type="java.io.File">classpath:security/idp.xml</value>
			</constructor-arg>
			<property name="parserPool" ref="parserPool"/>
		</bean>
	</constructor-arg>
	<constructor-arg>
		<bean class="org.springframework.security.saml.metadata.ExtendedMetadata"/>
	</constructor-arg>
</bean>]]></programlisting></para>
			  <para>Metadata is automatically refreshed in intervals specified by properties <emphasis>minRefreshDelay</emphasis> and <emphasis>maxRefreshDelay</emphasis> of the <emphasis>MetadataProvider</emphasis> bean.</para>
			</section>
			<section id="configuration-metadata-idp-http">
				<title>HTTP-based metadata provider</title>
				<para>HTTP-based provider loads metadata from an URL.<programlisting><![CDATA[<bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
	<constructor-arg>
		<bean class="org.opensaml.saml2.metadata.provider.HTTPMetadataProvider">
			<constructor-arg>
				<value type="java.lang.String">https://idp.ssocircle.com/idp-meta.xml</value>
			</constructor-arg>
			<constructor-arg>
				<!-- Timeout for metadata loading in ms -->
				<value type="int">5000</value>
			</constructor-arg>
			<property name="parserPool" ref="parserPool"/>
		</bean>
	</constructor-arg>
	<constructor-arg>
		<bean class="org.springframework.security.saml.metadata.ExtendedMetadata"/>
	</constructor-arg>
</bean>]]></programlisting></para>
				<para>Metadata is automatically refreshed in intervals specified by properties <emphasis>minRefreshDelay</emphasis> and <emphasis>maxRefreshDelay</emphasis> of the <emphasis>MetadataProvider</emphasis> bean.</para>
				<para>Alternatively class <emphasis>org.opensaml.saml2.metadata.provider.FileBackedHTTPMetadataProvider</emphasis> can be used to provide a backup in case URL is temporarily unavailable. File
				to use as backup is specified as third argument in the <emphasis>MetadataProvider</emphasis> bean constructor.</para>
			</section>
            <section id="configuration-metadata-https">
                <title>HTTP-based metadata provider with SSL</title>
                <para>By default, loading of metadata using the HTTP-based provider over HTTPS performs trust verification configured in your JDK. In case you'd like to use certificates in your <emphasis>keyStore</emphasis>, add the following bean which changes the socketFactory used by the HTTP Client:
                <programlisting><![CDATA[<bean class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer"/>]]></programlisting></para>
                <para>The <emphasis>TLSProtocolConfigurer</emphasis> instantiates <emphasis>TLSProtocolSocketFactory</emphasis> and registers is as a default socket factory for https protocol inside the HTTP Client used for metadata loading.
                The socket factory uses all public certificates present in the <emphasis>keyStore</emphasis> as trust anchors for PKIX validation. The used keys can be constrained with property <emphasis>trustedKeys</emphasis>.</para>
                <para>The socket factory configured in this fashion is used for all metadata providers. It is possible to customize metadata loading on a per-provider basis by adding a configured HttpClient instance to the HTTPMetadataProvider constructor.</para>
            </section>
			<section id="configuration-metadata-idp-signature">
				<title>Metadata signature verification</title>
				<para>Importing of digitally signed metadata requires verification of signature's validity and trust. Metadata is not required to be signed by default.
				When present, signature is verified with PKIX algorithm and uses all public keys present in the configured <emphasis>keyManager</emphasis> as trust anchors. Make sure to include root CA
				certificate and intermediary CA certificates of the signature in your <emphasis>keyStore</emphasis>. For details see <xref linkend="configuration-key-management-public-keys"/>.</para>
				<para>You can limit certificates used to perform the verification by setting property <emphasis>metadataTrustedKeys</emphasis> of the ExtendedMetadataDelegate bean. The provided
				collection should contain aliases of keys to be used as trust anchors.</para>
				<para>Signature verification can be disabled by setting property <emphasis>metadataTrustCheck</emphasis> to false in the ExtendedMetadataDelegate bean.
				Setting <emphasis>metadataRequireSignature</emphasis> to true will reject metadata unless it's digitally signed.</para>
			</section>
		</section>
		<section id="configuration-metadata-extended">
			<title>Extended metadata</title>
			<para>Extended metadata provides additional settings for customization of SAML exchanges between SP and IDP which are not supported in the standard SAML 2.0 metadata documents.
      Examples of such settings are requirements for message signing, IDP discovery and security profiles.</para>
            <para>Extended metadata is defined using
      <emphasis>org.springframework.security.saml.metadata.ExtendedMetadata</emphasis> beans embedded inside ExtendedMetadataDelegate for each SP or IDP metadata definition.
      In case a single metadata document contains multiple identity providers (in multiple EntityDescriptor elements), extended metadata can be set separately for each of them using a map with
      entity IDs as keys, e.g.: <programlisting><![CDATA[<bean class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
	<constructor-arg>
		metadata provider bean
	</constructor-arg>
	<constructor-arg>
		<!-- Default extended metadata for entities not specified in the map -->
		<bean class="org.springframework.security.saml.metadata.ExtendedMetadata"/>
	</constructor-arg>
	<constructor-arg>
		<!-- Extended metadata for specific IDPs -->
		<map>
			<entry key="https://idp.ssocircle.com">
				<bean class="org.springframework.security.saml.metadata.ExtendedMetadata"/>
			</entry>
		</map>
	</constructor-arg>
</bean>]]></programlisting></para>
            <para>The following table summarizes settings available in the extended metadata. The same class is
                used for both local service providers and remote identity providers; each value contains information
                about the entities it's valid for.
                <table id="configuration-metadata-extended-settings">
                    <title>Extended metadata settings</title>
                    <tgroup cols="4">
                        <colspec colname="_1" colwidth="1.2*" align="left"/>
                        <colspec colname="_2" colwidth="0.4*" align="left"/>
                        <colspec colname="_3" colwidth="0.4*" align="left"/>
                        <colspec colname="_4" colwidth="1.9*" align="left"/>
                        <thead>
                            <row>
                                <entry>Property</entry>
                                <entry>Default</entry>
                                <entry>Entities</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>local</entry>
                                <entry>false</entry>
                                <entry>local and remote</entry>
                                <entry>True for metadata of a local service provider. False for remote identity
                                    providers.
                                </entry>
                            </row>
                            <row>
                                <entry>alias</entry>
                                <entry></entry>
                                <entry>local only</entry>
                                <entry>Unique alias used to identify the selected local service provider based on
                                    used URL. See <xref linkend="configuration-entity-alias"/>.
                                </entry>
                            </row>
                            <row>
                                <entry>signMetadata</entry>
                                <entry>false</entry>
                                <entry>local only</entry>
                                <entry>When true generated metadata will be signed using XML Signature using certificate with alias of <literal>signingKey</literal>.</entry>
                            </row>
                            <row>
                                <entry>idpDiscoveryEnabled</entry>
                                <entry>false</entry>
                                <entry>local only</entry>
                                <entry>When true system will initialize IDP discovery when no IDP is selected during
                                    SSO initialization. See <xref linkend="configuration-discovery"/>.
                                </entry>
                            </row>
                            <row>
                                <entry>idpDiscoveryURL</entry>
                                <entry>internal discovery URL</entry>
                                <entry>local only</entry>
                                <entry>URL of the IDP discovery service. Only used when discovery is enabled.
                                </entry>
                            </row>
                            <row>
                                <entry>idpDiscoveryResponseURL</entry>
                                <entry>internal discovery URL</entry>
                                <entry>local only</entry>
                                <entry>URL expecting response from the IDP discovery service. Only used when
                                    discovery is enabled.
                                </entry>
                            </row>
                            <row>
                                <entry>ecpEnabled</entry>
                                <entry>false</entry>
                                <entry>local only</entry>
                                <entry>Property enables support for the SAML 2.0 ECP profile. See <xref
                                        linkend="enhanced-client"/>.
                                </entry>
                            </row>
                            <row>
                                <entry>securityProfile</entry>
                                <entry>metaiop</entry>
                                <entry>local only</entry>
                                <entry>Security profile for verification of message signatures. See <xref
                                        linkend="configuration-security-profiles"/>.
                                </entry>
                            </row>
                            <row>
                                <entry>sslSecurityProfile</entry>
                                <entry>pkix</entry>
                                <entry>local only</entry>
                                <entry>Security profile for vericiation of SSL/TLS endpoint trust. See <xref
                                        linkend="configuration-security-profiles"/>.
                                </entry>
                            </row>
                            <row>
                                <entry>sslHostnameVerification</entry>
                                <entry>default</entry>
                                <entry>local only</entry>
                                <entry>Verification of hostnames for HTTPS calls (e.g. in Artifact resolution).
                                    Allowed values are <emphasis>default</emphasis>, <emphasis>defaultAndLocalhost</emphasis>,
                                    <emphasis>strict</emphasis> and <emphasis>allowAll</emphasis>. Value <emphasis>allowAll</emphasis>
                                    effectively disables hostname verification. All values are case-insensitive. For
                                    more details on the supported hostname verifications see
                                    <link linkend="http://www.juliusdavies.ca/commons-ssl/javadocs/org/apache/commons/ssl/HostnameVerifier.html">Commons-SSL JavaDoc</link>.
                                </entry>
                            </row>
                            <row>
                                <entry>signingAlgorithm</entry>
                                <entry>-</entry>
                                <entry>local only</entry>
                                <entry>Algorithm used to create digital signature on the metadata object. Typical values are <emphasis>https://www.w3.org/2000/09/xmldsig#rsa-sha1</emphasis>,
                                  <emphasis>https://www.w3.org/2001/04/xmldsig-more#rsa-sha256</emphasis> and <emphasis>https://www.w3.org/2001/04/xmldsig-more#rsa-sha512</emphasis>.</entry>
                            </row>
                            <row>
                                <entry>signingKey</entry>
                                <entry>-</entry>
                                <entry>local and remote</entry>
                                <entry>For local entities alias of private key used to create signatures. The
                                    default private key is used when no value is provided. For remote identity
                                    providers defines an additional public key used to verify signatures.
                                </entry>
                            </row>
                            <row>
                                <entry>encryptionKey</entry>
                                <entry>-</entry>
                                <entry>local and remote</entry>
                                <entry>For local entities alias of private key used to encrypt data. The default
                                    private key is used when no value is provided. For remote identity providers
                                    defines an additional public key used to decrypt data.
                                </entry>
                            </row>
                            <row>
                                <entry>tlsKey</entry>
                                <entry>-</entry>
                                <entry>local and remote</entry>
                                <entry>For local entities alias of private key used for SSL/TLS client
                                    authentication. No client authentication is used when value is not specified.
                                    For remote identity providers defines an additional public key used for trust
                                    resolution.
                                </entry>
                            </row>
                            <row>
                                <entry>trustedKeys</entry>
                                <entry>-</entry>
                                <entry>remote</entry>
                                <entry>Keys included as trusted anchors during PKIX evaluation. All keys in the
                                    keyStore are used as trust anchors with null value. Keys are only used with PKIX
                                    security profile.
                                </entry>
                            </row>
                            <row>
                                <entry>requireLogoutRequestSigned</entry>
                                <entry>true</entry>
                                <entry>local and remote</entry>
                                <entry>For local entities enables requirement of signed logout requests. For remote
                                    entities enables signing of requests sent to the IDP.
                                </entry>
                            </row>
                            <row>
                                <entry>requireLogoutResponseSigned</entry>
                                <entry>false</entry>
                                <entry>local and remote</entry>
                                <entry>For local entities enables requirement of signed logout responses. For remote
                                    entities enables signing of responses sent to the IDP.
                                </entry>
                            </row>
                            <row>
                                <entry>requireArtifactResolveSigned</entry>
                                <entry>true</entry>
                                <entry>remote only</entry>
                                <entry>Enables signing of artifact resolution requests sent to the remote identity
                                    providers.
                                </entry>
                            </row>
                            <row>
                                <entry>supportUnsolicitedResponse</entry>
                                <entry>true</entry>
                                <entry>remote only</entry>
                                <entry>Enables support for Unsolicited Responses (IDP-Initialized SSO) sent from 
                                    this remote entity.
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
            <para>For additional examples on setting up metadata and extended metadata see
                <xref linkend="configuration-metadata-sp"/> for local SP, and <xref linkend="configuration-metadata-idp"/>
                for remote IDPs.
            </para>
        </section>
        <section id="configuration-entity-alias">
            <title>Multi-tenancy and entity alias</title>
            <para>Spring SAML contains limited support for multi-tenancy. It is possible to define configuration for multiple instances of local service providers, where each
                can have different URLs and security settings. System is differentiating between the service provider instances using <emphasis>entity alias</emphasis> which
                is a unique identifier within deployment of Spring SAML.</para>
            <para><emphasis>Entity alias</emphasis> is appended to URLs of SAML endpoints and used by Spring SAML to identify the correct instance.
                For example for local service provider with <emphasis>entity alias</emphasis>
                <emphasis>customer123</emphasis> the standard URL <emphasis>scheme://server:port/contextPath/saml/login</emphasis> becomes
                <emphasis>scheme://server:port/contextPath/saml/login/alias/customer123</emphasis>.</para>
            <para>The entity alias functionality can only be used together with pre-configured metadata (see <xref linkend="configuration-metadata-sp-import"/>).
                The <emphasis>entity alias</emphasis> is specified in the extended metadata of each of the configured service providers.</para>
            <para>Spring SAML doesn't enforce any limitations on which Identity Provider can be deliver messages to which of the local Service Providers. In case your application
            requires similar rules (for example only certain tenants can authenticate using a specific IDP), make sure to implement them for example in your <emphasis>SAMLUserDetailsService</emphasis> (for single sign-on).</para>
            <para>Selection of the correct Service Provider instance based on URL is performed inside <emphasis>SAMLContextProviderImpl</emphasis> class.</para>
        </section>
    </chapter>

    <chapter id="security">
        <title>Security configuration</title>
        <para>
            SAML Extension requires configuration of security settings which include cryptographic
            material used for digital signatures and encryption, security profiles for configuration of trusted
            cryptographic material provided by remote entities and verifications of HTTPS connections.
        </para>
        <section id="configuration-key-management">
            <title>Key management</title>
            <para>
                SAML exchanges involve usage of cryptography for signing and encryption of data. All interaction with cryptographic keys is
                done through interface <emphasis>org.springframework.security.saml.key.KeyManager</emphasis>. The default implementation
                <emphasis>org.springframework.security.saml.key.JKSKeyManager</emphasis> relies on a single JKS key store which contains 
                all private and public keys. KeyManager should contain at least one private key which should be marked as default by using 
                the alias of the private key as part of the <emphasis>JKSKeyManager</emphasis> constructor.
            </para>
            <para>
                In case your application doesn't need to create digital signatures and/or decrypt incoming messages, it is possible to use an empty 
                implementation of the keystore which doesn't require any JKS file - <emphasis>org.springframework.security.saml.key.EmptyKeyManager</emphasis>. 
                This can be the case for example when using only IDP-Initialized single sign-on. Please note that when using the <emphasis>EmptyKeyManager</emphasis> 
                some of Spring SAML features will be unavailable. This includes at least SP-initialized Single Sign-on, Single Logout, usage of additional 
                keys in <emphasis>ExtendedMetadata</emphasis> and verification of metadata signatures. Use the following bean in order to initialize the <emphasis>EmptyKeyManager</emphasis>:
<programlisting><![CDATA[<bean id="keyManager" class="org.springframework.security.saml.key.EmptyKeyManager"/>]]></programlisting>
            </para>
            <section id="configuration-key-management-jks">
                <title>Sample JKS keystore</title>
                <para>Sample application contains a default JKS key store with a sample private certificate usable for test purposes. The key store
                    is defined as:<programlisting><![CDATA[<bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
	<constructor-arg value="classpath:security/samlKeystore.jks"/>
	<constructor-arg type="java.lang.String" value="nalle123"/>
	<constructor-arg>
	<map>
		<entry key="apollo" value="nalle123"/>
	</map>
	</constructor-arg>
	<constructor-arg type="java.lang.String" value="apollo"/>
</bean>]]></programlisting></para>
                 <para>The first argument points to the used key store file, second contains password for the keystore, third then map with
                 passwords for private keys with alias-password value pairs. Alias of the default certificate is the last parameter.</para>
             </section>
             <section id="configuration-key-management-private-keys">
                 <title>Generating and importing private keys</title>
                 <para>Private keys (with either self-signed or CA signed certificates) are used to digitally sign SAML messages,
                 encrypt their content and in some cases for SSL/TLS Client authentication of your service provider application.
                 SAML Extension ships with a default private key in the <emphasis>samlKeystore.jks</emphasis> with alias <emphasis>apollo</emphasis>
                 which can be used for initial testing, but for security reason should be replaced with your own key in early development stages.</para>
                 <para>In case your IDP doesn't require keys signed by a specific certification authority you can generate your own self-signed key using the
                 Java utility <emphasis>keytool</emphasis>, e.g. with: <programlisting>keytool -genkeypair -alias some-alias -keypass changeit -keystore samlKeystore.jks</programlisting></para>
                 <para>The keystore will now contain additional PrivateKeyEntry with alias <emphasis>mykey</emphasis> which can be imported to the <emphasis>keyManager</emphasis> in your <emphasis>securityContext.xml</emphasis>.</para>
                 <para>Keys signed by certification authorities are typically provided in .p12/.pfx format (or can be converted to such using OpenSSL) and imported to Java keystore with, e.g.:
                 <programlisting>keytool -importkeystore -srckeystore key.p12 -srcstoretype PKCS12 -srcstorepass password \
	-alias some-alias -destkeystore samlKeystore.jks -destalias some-alias \
	-destkeypass changeit</programlisting></para>
    <para>The following command can be used to determine available alias in the p12 file: <programlisting>keytool -list -keystore key.p12 -storetype pkcs12</programlisting></para>
             </section>
             <section id="configuration-key-management-public-keys">
                 <title>Importing public keys</title>
                 <para>Cryptographic material used to decrypt incoming data and verify trust of signatures in SAML messages and metadata is stored either
                 in metadata of remote entities or in the <emphasis>keyManager</emphasis>. In order to import additional trusted key to the keystore
                 run, e.g.: <programlisting>keytool -importcert -alias some-alias -file key.cer -keystore samlKeystore.jks</programlisting></para>
                 <para>Imported keys can be referenced in ExtendedMetadataDelegate and ExtendedMetadata beans,
                 for details see <xref linkend="configuration-metadata-idp-signature"/> and <xref linkend="configuration-security-profiles"/>.</para>
             </section>
             <section id="configuration-key-management-ssl-keys">
                 <title>Loading SSL/TLS certificates</title>
                 <para>Direct SSL/TLS connections (used with HTTP-Artifact binding) require verification of the public key presented by the server.
                 The <ulink url="https://github.com/vschafer/ssl-extractor">SSL Extractor utility</ulink> can be used to extract certificates presented by an SSL/TLS
                 endpoint, e.g. with: <programlisting>java -jar sslextractor-0.9.jar www.google.com 443</programlisting></para>
                 <para>The certificates are stored as .cer files and can be imported to the keystore as a usual public key. For details about
                 configuring of trust for SSL/TLS connections see <xref linkend="configuration-security-profiles"/>.</para>
             </section>
         </section>
         <section id="configuration-security-profiles">
             <title>Security profiles</title>
             <para>Exchanges of messages between identity providers and service providers with SAML protocol
                 involves usage of digital signatures. Signatures are typically constructed using means of asymmetric
                 cryptography and public key infrastructure with public and private keys signed by trusted certification
                 authorities. Signatures are either applied directly to parts of XML representation of SAML messages
                 using XML Signature or are part of the transport layer used to deliver the message like SSL/TLS.
             </para>
             <para>Verification of signatures is executed in two phases. Signature is first checked for validity by
                 comparing digital hash included as part of the signature with value calculated from the content.
                 Subsequently it is verified whether party who created the signature is trusted by the recipient. Spring Security SAML
                 provides two mechanisms for defining which signatures should be accepted - metadata interoperability
                 mode and PKIX mode.
             </para>
             <para>
                 Security profiles are defined in Extended Metadata of your local SP. Profile can be defined separately
                 for XML Signatures using property <emphasis>securityProfile</emphasis> and for SSL/TLS Signatures using
                 property<emphasis>sslSecurityProfile</emphasis>. Value of both properties can be either <emphasis>metaiop</emphasis>
                 or <emphasis>pkix</emphasis>. For details about using Extended Metadata see <xref linkend="configuration-metadata"/>,
                 for reference of allowed values see <xref linkend="configuration-metadata-extended"/>.
             </para>
             <section id="configuration-security-profiles-metaiop">
                 <title>Metadata interoperability profile (MetaIOP)</title>
                 <para>With MetaIOP mode certificates are not checked for expiration or revocation and certificate paths
                     are not
                     verified. This means that it does not matter which certification authority issued the certificate,
                     as the fact whether the certificate is trusted or not is conveyed using other mechanisms (e.g. by
                     secure metadata exchange or digital signature of metadata itself).
                 </para>
                 <para>Signature is deemed trusted when the certificate used to create it is included in one
                     of the following places:
                     <itemizedlist spacing="compact">
                         <listitem>
                             <para>Key with usage of signing or unspecified in entity metadata of a remote entity</para>
                         </listitem>
                         <listitem>
                             <para>Signing key specified in property <emphasis>signingKey</emphasis> of extended metadata of a remote entity</para>
                         </listitem>
                     </itemizedlist>
                 </para>
                 <para>
                     MetaIOP is the default profile for verification of XML signatures. For details about this profile
                     see <ulink url="https://docs.oasis-open.org/security/saml/Post2.0/sstc-metadata-iop.pdf">the specification</ulink>.
                 </para>
             </section>
             <section id="configuration-security-profiles-pkix">
                 <title>PKIX profile</title>
                 <para>
                     With PKIX profile trust of signature certificates is verified based on a certificate path
                     between trusted CA certificates and the certificate in question. Certificate is trusted when it's
                     possible to construct path from a trusted certificate to the validated one. With this profile
                     certificate expiration and revocation can be checked.
                 </para>
                 <para>Trusted keys (anchors) for PKIX verification of signatures are combined from the following places:
                     <itemizedlist spacing="compact">
                         <listitem>
                             <para>Key with usage of signing or unspecified in entity metadata of a remote entity</para>
                         </listitem>
                         <listitem>
                             <para>Signing key specified in property <emphasis>signingKey</emphasis> of extended metadata of a remote entity</para>
                         </listitem>
                         <listitem>
                             <para>All keys specified in <emphasis>trustedKeys</emphasis> set of extended metadata of a remote entity,
                                 or all keys available in the key store when the property is null (default value)</para>
                         </listitem>
                     </itemizedlist>
                 </para>
           <para>Please note that trust anchors are treated as automatically trusted and are not necessarily subject to all checks as leaf certificates are (depending
           on your security provider implementation). You should preferably use only your CA and intermediary CA certificates as trust anchors. In case you want to ignore
           certificates available in your XML metadata and only use settings from your manually set ExtendedMetadata, set property <emphasis>useXmlMetadata</emphasis>
           of your <emphasis>metadataResolver</emphasis> to false:
               <programlisting><![CDATA[<bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl">
	<property name="metadataResolver">
		<bean class="org.springframework.security.saml.trust.MetadataCredentialResolver">
			<constructor-arg index="0" ref="metadata"/>
			<constructor-arg index="1" ref="keyManager"/>
			<property name="useXmlMetadata" value="false"/>
		</bean>
	</property>
</bean>]]></programlisting>
           </para>
           <para>PKIX verification supports checking of CRLs (certificate revocation lists) using the default underlaying Java Security Provider
           (e.g. Sun JCE, BouncyCastle JCE).
           </para>
           <para>The PKIX algorithm needs to be advised that the revocation checking is enabled. You can do so by customizing the <emphasis>pkixTrustEvaluator</emphasis> inside <emphasis>SAMLContextProvider</emphasis>, see an example with properties <emphasis>forceRevocationEnabled</emphasis> and <emphasis>revocationEnabled</emphasis> bellow.</para>
           <para>By default the validation algorithm only uses the <emphasis>CertPathBuilder</emphasis>. Some Java security implementations do not support full feature set of revocation checking in this class and only
            implement them in the <emphasis>CertPathValidator</emphasis> (e.g. Sun provider only supports OCSP in CertPathBuilder since Java 1.8). You can instruct system to use both
            <emphasis>CertPathBuilder</emphasis> and <emphasis>CertPathValidator</emphasis> by setting property <emphasis>validateCertPath</emphasis> to <emphasis>true</emphasis> on bean
            <emphasis>CertPathPKIXTrustEvaluator</emphasis>.</para>
            <para>The security provider used for loading of PKIX verification factories can be customized using property <emphasis>securityProvider</emphasis>.</para>
            <para><programlisting><![CDATA[<bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl">
	<property name="pkixTrustEvaluator">
		<bean class="org.springframework.security.saml.trust.CertPathPKIXTrustEvaluator">
			<property name="PKIXValidationOptions">
				<bean class="org.opensaml.xml.security.x509.CertPathPKIXValidationOptions">
					<property name="forceRevocationEnabled" value="true"/>
					<property name="revocationEnabled" value="true"/>
				</bean>
			</property>
			<property name="validateCertPath" value="true"/>
			<property name="securityProvider" value="SUN"/>
		</bean>
	</property>
</bean>]]></programlisting>
             </para>
             <para>Spring SAML uses standard CertPath verification API. The default Sun JCE provider supports automatic revocation checking based on the certificate's CRL Distribution Points Extension
                 (by setting system property <emphasis>com.sun.security.enableCRLDP</emphasis> to true), CRL point defined using certificate's Authority
                 Information Access (AIA) Extension (by setting system property <emphasis>com.sun.security.enableAIAcaIssuers</emphasis> to true)
                 and OCSP (by setting system property <emphasis>ocsp.enable</emphasis> to true).
                 For details see the <ulink url="https://docs.oracle.com/javase/7/docs/technotes/guides/security/certpath/CertPathProgGuide.html#AppB">Java PKI Programmer's Guide</ulink>.
                 In case you are using another security provider, please consult its manual for functionality related to <emphasis>CertPathBuilder</emphasis> and <emphasis>CertPathValidator</emphasis>
                 with the <emphasis>PKIX</emphasis> algorithm.
             </para>
               <para>You can also manually populate CRLs by extending class <emphasis>org.springframework.security.saml.trust.PKIXInformationResolver</emphasis> and overriding method <emphasis>populateCRLs</emphasis>
               with your own CRL population logic. Populated CRLs are automatically added to the PKIX verification mechanism. The customized class needs to be set to property <emphasis>pkixResolver</emphasis>
               in the <emphasis>contextProvider</emphasis> bean.
               </para>
             </section>
             <section id="configuration-security-profiles-customization">
                     <title>Custom profile</title>
                     <para>
                         Engine used to verify trust of signatures for given combination of SP/IDP is created in methods
                         <emphasis>populateTrustEngine</emphasis> and <emphasis>populateSSLTrustEngine</emphasis> of interface
                         <emphasis>org.springframework.security.saml.context.SAMLContextProvider</emphasis> and can be overridden
                         with custom implementation. See <xref linkend="configuration-context-provider"/> for details on context customization.
                     </para>
             </section>
        </section>
        <section id="configuration-security-profiles-hostnames">
            <title>Hostname verification for HTTPS connections</title>
            <para>
                Connections to HTTPS services (e.g. during Artifact resolution) require verification that the connected hostname
                corresponds with the hostname defined in the service's public certificate. Hostname verification is enabled
                by default.
            </para>
            <para>
                Verification can be disabled by setting ExtendedMetadata property <emphasis>sslHostnameVerification</emphasis>
                of the local SP entity to <emphasis>allowAll</emphasis>. For details on using the ExtendedMetadata see <xref linkend="configuration-metadata-extended"/>.
            </para>
            <para>
                All supported values can be found in the ExtendedMetadata reference <xref linkend="configuration-metadata-extended"/>.
            </para>
        </section>
    </chapter>

    <chapter id="configuration-sso">
        <title>Single sign-on configuration</title>
        <section id="configuration-discovery">
            <title>IDP selection and discovery</title>
            <para>Discovery helps your Service Provider determine which Identity Provider should be used for authentication of the current user. It is automatically initialized during calls to 
            single sign-on endpoint at <emphasis>scheme://server:port/contextPath/saml/login</emphasis>. SAML Extension supports multiple modes of discovery including 
            the <ulink url="https://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-idp-discovery.pdf">Identity Provider Discovery Service Protocol and Profile</ulink>.</para>
            <para>
              IDP discovery modes can always be skipped during SSO initialization by specifying HTTP request parameter <emphasis>idp</emphasis> with the
              entityId of the required IDP, e.g. <emphasis>scheme://server:port/contextPath/saml/login?idp=mySelectedIDP</emphasis>.
            </para>
            <para>
              The URL where local SP expects discovery response can be included in the SP metadata as one of the extensions. The feature can be enabled by setting property <emphasis>includeDiscoveryExtension</emphasis>
              to true on bean <emphasis>MetadataGenerator</emphasis> inside <emphasis>MetadataGeneratorFilter</emphasis>, e.g.:
        <programlisting><![CDATA[<bean id="metadataGeneratorFilter" class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
	<constructor-arg>
		<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
			<property name="includeDiscoveryExtension" value="true"/>
		</bean>
	</constructor-arg>
</bean>]]></programlisting>
            </para>
            <para>
              <simplesect>
                <title>Default IDP without discovery</title>
                <para>The mode is enabled by default and automatically selects the default IDP without performing discovery.</para>
                <para>The default IDP can be configured using property <emphasis>defaultIDP</emphasis> on bean <emphasis>metadata</emphasis> in the Spring Security configuration. 
                In case the property isn't set, system will automatically use the first available IDP.</para>
              </simplesect>
              <simplesect>
                <title>Local discovery service</title>
                <para>SAML Extension includes a local IDP discovery service which presents user with an IDP selection page. This mode can be enabled by setting property <emphasis>includeDiscovery</emphasis> in the
                <link linkend="configuration-metadata-extended">local SP extended metadata</link> to <emphasis>true</emphasis>.</para> 
                <para>The selection page can be customized using property <emphasis>idpSelectionPath</emphasis> on bean <emphasis>samlIDPDiscovery</emphasis>. System forwards to this page wih a discovery request which includes the following request attributes:
                  <itemizedlist>
                        <listitem>
                            <para><emphasis>idpDiscoReturnURL</emphasis> - URL to send the IDP selection result to using GET action</para>
                        </listitem>
                        <listitem>
                            <para><emphasis>idpDiscoReturnParam</emphasis> - name of the GET parameter to include the entity ID of the selected IDP</para>
                        </listitem>
                  </itemizedlist>
                </para>
                <para>See the default implementation in <emphasis>sample/src/main/webapp/WEB-INF/security/idpSelection.jsp</emphasis> for an example.</para>
              </simplesect>
              <simplesect>
                <title>Remote discovery service</title>
                <para>In order to enable external IDP discovery service configure property <emphasis>idpDiscoveryURL</emphasis> in your <link linkend="configuration-metadata-extended">local
                SP extended metadata</link> to the external discovery URL. Make sure property <emphasis>idpDiscoveryEnabled</emphasis> is set to true. The remote discovery service needs to support
                the Identity Provider Discovery Service Protocol and Profile.</para>
              </simplesect>
            </para>
        </section>
        <section id="configuration-sso-process">
            <title>Single sign-on process</title>
            <para>Spring SAML Extension supports both SP-initialized and IDP-initialized single sign-on.</para>        
            <section id="configuration-sso-process-sp-init">
                 <title>Service provider initialized SSO</title>
                 <para>SP initialized SSO process can be started in two ways:
                 <itemizedlist>
                     <listitem>
                         <para>User accesses a resource protected by Spring Security which initializes SAMLEntryPoint</para>
                     </listitem>
                     <listitem>
                         <para>User is redirected to the SSO endpoint at e.g. https://www.server.com/context/saml/login</para>
                     </listitem>
                 </itemizedlist>
                 </para>
                 <para>After identification of IDP to use for authentication (for details see <xref linkend="configuration-discovery"/>), SAML Extension creates an AuthnRequest SAML message
                 and sends it to the selected IDP. Both construction of the AuthnRequest and binding used to send it can be customized using <emphasis>WebSSOProfileOptions</emphasis>
                 object. SAMLEntryPoint determines <emphasis>WebSSOProfileOptions</emphasis> configuration to use by calling method <emphasis>getProfileOptions</emphasis>.
                 The default implementation returns the value specified in property <emphasis>defaultOptions</emphasis>. The method can be overridden to provide custom logic for SSO initialization.</para>
                 <para>Default settings for <emphasis>WebSSOProfileOptions</emphasis> can be specified in bean <emphasis>samlEntryPoint</emphasis> of your <emphasis>securityContext.xml</emphasis>, e.g.:
                 <programlisting><![CDATA[<bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
	<property name="defaultProfileOptions">
		<bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
			<property name="binding" value="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST"/>
			<property name="includeScoping" value="false"/>
		</bean>
	</property>
</bean>]]></programlisting></para>
                <para>WebSSOProfileOptions supports the following settings:
                    <table id="configuration-sso-webssoprofile-table">
                     <title><emphasis>org.springframework.security.saml.websso.WebSSOProfileOptions</emphasis> parameters</title>
                     <tgroup cols="2">
                         <colspec colname="_1" colwidth="0.4*" align="left"/>
                         <colspec colname="_2" colwidth="1.0*" align="left"/>
                         <thead>
                             <row>
                                 <entry>Property</entry>
                                 <entry>Description</entry>
                             </row>
                         </thead>
                        <tbody>
                            <row>
                                <entry>binding</entry>
                                <entry>Default: binding of the first declared SingleSignOnService in IDP metadata. Binding used to send message to IDP. Supported values depend on the SP configuration, typically "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST", "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
                    "urn:oasis:names:tc:SAML:2.0:bindings:PAOS" and "urn:oasis:names:tc:SAML:2.0:profiles:holder-of-key:SSO:browser".</entry>
                            </row>
                            <row>
                                <entry>providerName</entry>
                                <entry>Default: empty. Human readable name of the local SP sent with the authentication request.</entry>
                            </row>
                            <row>
                                <entry>assertionConsumerIndex</entry>
                                <entry>Default: empty. When set determines where should IDP send response and which binding to use. Otherwise system uses the default assertion consumer service marked as default, or first applicable. Available indexes can be found in metadata of this service provider.</entry>
                            </row>
                            <row>
                                <entry>nameID</entry>
                                <entry>Default: empty. Name ID to request from IDP in the NameIDPolicy. No NameIDPolicy is sent when not specified. Typical values are "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress", "urn:oasis:names:tc:SAML:2.0:nameid-format:transient", "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent", "urn:oasis:names:tc:SAML:2.0:nameid-format:encrypted".</entry>
                            </row>
                            <row>
                                <entry>allowCreate</entry>
                                <entry>Default: empty. Only applicable when nameID is specified, when true instructs IDP that it is allowed to create new user based on the authentication request.</entry>
                            </row>
                            <row>
                                <entry>passive</entry>
                                <entry>Default: false. Sets whether the IdP should refrain from interacting with the user during the authentication process.</entry>
                            </row>
                            <row>
                                <entry>forceAuthn</entry>
                                <entry>Default: false. When true IDP is required to re-authenticate user and not rely on previous authentication events.</entry>
                            </row>
                            <row>
                                <entry>includeScoping</entry>
                                <entry>Default: true. When true request will include Scoping element.</entry>
                            </row>
                            <row>
                                <entry>allowedIDPs</entry>
                                <entry>Default: empty. Values to be included in the Scoping element on top of the IDP message is sent to. Only applicable when includeScoping is set to true.</entry>
                            </row>
                            <row>
                                <entry>proxyCount</entry>
                                <entry>Default: 2. Determines value to be used in the proxyCount attribute of the scope in the AuthnRequest. Use zero to disable proxying or value >0 to specify how many hops are allowed. Only applicable when includeScoping is set to true.</entry>
                            </row>
                            <row>
                                <entry>authnContexts</entry>
                                <entry>Default: empty. Authentication contexts IDP is allowed to use when authenticating user. See <ulink url="https://docs.oasis-open.org/security/saml/v2.0/saml-authn-context-2.0-os.pdf">the specification</ulink> for details.</entry>
                            </row>
                            <row>
                                <entry>authnContextComparison</entry>
                                <entry>Default: AuthnContextComparisonTypeEnumeration.EXACT. Mechanism used by IDP to determine authentication method to use. See <ulink url="https://docs.oasis-open.org/security/saml/v2.0/saml-authn-context-2.0-os.pdf">the specification</ulink> for details.</entry>
                            </row>
                            <row>
                                <entry>relayState</entry>
                                <entry>Default: empty. Value is sent to IDP and provided back to SP as part of the authentication response.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                </para>
                <para>The AuthnRequest message is sent unencrypted on message level. If needed, encryption should be provided by SSL/TLS on transport layer.</para>
            </section>
            <section id="configuration-sso-process-idp-init">
                <title>Identity provider initialized SSO</title>
                <para>Spring SAML supports reception of Unsolicited Response messages (so called IDP-initialized SSO). In this scenario IDP creates a Response object in the same way as if it was replying to 
                an AuthnRequest message sent from SP, but it omits the InResponseTo parameter. Message is then sent to the AssertionConsumerURL of Spring SAML (typically 
                <emphasis>scheme://server:port/contextPath/saml/SSO</emphasis>) using one of the supported bindings. List of all available endpoints and bindings can be found in the metadata
                of the Spring SAML application.</para>
                <para>Received Unsolicited Respose message is processed and validated in exactly the same way as with SP-Initialized SSO.</para>
                <para>Support for unsolicited messages can be disabled in the ExtendedMetadata of remote entities using property <emphasis>supportUnsolicitedResponse</emphasis>.</para>
            </section>
        </section>
        <section id="configuration-logout">
            <title>Logout process</title>
            <para>Spring SAML Extension supports both Local Logout and Single Logout mechanisms.</para>
             <section id="configuration-logout-local">
                     <title>Local logout</title>
                     <para>
                         Local logout terminates only the local session and doesn't affect neither session at IDP, nor sessions at other SPs where user logged in using single sign-on. Local logout
                 can be initialized at <emphasis>scheme://server:port/contextPath/saml/logout?local=true</emphasis>. Call is intercepted by bean <emphasis>samlLogoutFilter</emphasis> which can be configured with
                 the following settings:
               <itemizedlist>
                     <listitem>
                         <para>Instance of interface <emphasis>org.springframework.security.web.authentication.logout.LogoutSuccessHandler</emphasis> (constructor index 0) which determines operation to perform after successful logout (e.g. redirect to a logout landing page). By default user gets redirected to page <emphasis>logout.jsp</emphasis>.</para>
                     </listitem>
                     <listitem>
                         <para>Instances of interface <emphasis>org.springframework.security.web.authentication.logout.LogoutHandler</emphasis> (constructor index 1) which are responsible for destruction of user's session. The default handler <emphasis>org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler</emphasis> logs the user out by removing the Authentication object, but leaves the HTTP session opened.</para>
                     </listitem>
                   </itemizedlist></para>
              <para>It is also possible to configure local logout using standard Spring Security element <emphasis>&lt;security:logout&gt;</emphasis> inside <emphasis>&lt;security:http&gt;</emphasis> block. For example:
                  <programlisting><![CDATA[<security:http>
	<security:logout logout-url="/j_logout" logout-success-url="/logout.jsp"/>
</security:http>]]></programlisting></para>
             </section>
             <section id="configuration-logout-global">
                     <title>Global logout</title>
                     <para>Global logout implements the SAML 2.0 Single Logout profile which terminates both session at the current SP, the IDP session and sessions at other SPs connected to the same IDP session. Single Logout
                 can be initialized from any of the participating SPs or from the IDP.</para>
                 <para>Single Logout is currently supported with HTTP-Redirect and HTTP-POST bindings. SOAP binding is not available.</para>
                 <para>Global logout can be initialized at <emphasis>scheme://server:port/contextPath/saml/logout</emphasis>. System automatically determines which IDP to send the request to based on the currently authenticated user. Single logout can be configured using beans <emphasis>samlLogoutFilter</emphasis> and <emphasis>samlLogoutProcessingFilter</emphasis> with the following options:
                 <itemizedlist>
                     <listitem>
                         <para>Bean <emphasis>samlLogoutFilter</emphasis> can be provided with instances of interface <emphasis>org.springframework.security.web.authentication.logout.LogoutHandler</emphasis> (constructor index 3). The handlers are called before sending SAML 2.0 LogoutRequest to the IDP when initializing Single Logout from the current SP.</para>
                     </listitem>
                     <listitem>
                         <para>Bean <emphasis>samlLogoutProcessingFilter</emphasis> can be provided with instance of interface <emphasis>org.springframework.security.web.authentication.logout.LogoutSuccessHandler</emphasis> (constructor index 0). Handler is called after successful finalization of Single Logout process (reception of LogoutResponse from IDP) and determines operation to perform after logout (e.g. redirect to a logout landing page). By default user gets redirected to page <emphasis>logout.jsp</emphasis>.</para>
                     </listitem>
                     <listitem>
                         <para>Bean <emphasis>samlLogoutProcessingFilter</emphasis> can be provided with instances of interface <emphasis>org.springframework.security.web.authentication.logout.LogoutHandler</emphasis> (constructor index 1). The handlers are called after successful reception of SAML 2.0 LogoutRequest or LogoutResponse from the IDP.</para>
                     </listitem>
                   </itemizedlist></para>
                 <para>Spring SAML correctly handles SAML 2.0 LogoutRequest messages sent from the IDP and performs logout in case the message is valid. In case of invalid data (missing signature, invalid issuer, invalid issue time, invalid destination, invalid session index, invalid name ID, no user logged in) system responds with SAML 2.0 LogoutResponse with an error Status code.</para>
             </section>
        </section>
        <section id="configuration-authentication-object">
            <title>Authentication object</title>
            <para>Successful authentication using SAML token results in creation of an <emphasis>Authentication</emphasis> object by
            the <emphasis>SAMLAuthenticationProvider</emphasis>. By default instance of <emphasis>org.springframework.security.providers.ExpiringUsernameAuthenticationToken</emphasis>
            is created. Content of the resulting object can be customized by setting properties of the <emphasis>samlAuthenticationProvider</emphasis> bean in the <emphasis>securityContext.xml</emphasis>.
            An instance of <emphasis>org.springframework.security.saml.userdetails.SAMLUserDetailsService</emphasis> can be provided to supply application-specific information about the
            authenticated user.</para>
            <para>The <emphasis>Authentication</emphasis> object will by default include string version of the <emphasis>NameID</emphasis> included in the SAML Assertion as its<emphasis>principal</emphasis>. 
            Property <emphasis>forcePrincipalAsString</emphasis> can be used to change this to include the raw <emphasis>NameID</emphasis> element.</para>
            <para>The Authentication object is available in pages secured with Spring Security using <emphasis>SecurityContextHolder.getContext().getAuthentication()</emphasis> and is populated with the following values:
            <table id="authentication-object-table">
                <title>ExpiringUsernameAuthenticationToken values.</title>
                <tgroup cols="2">
                    <colspec colname="_1" colwidth="0.2*" align="left"/>
                    <colspec colname="_2" colwidth="1.0*" align="left"/>
                    <thead>
                        <row>
                            <entry>Property</entry>
                            <entry>Value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Principal</entry>
                            <entry>When forcePrincipalAsString = true (default) - <emphasis>String</emphasis> value of <emphasis>NameID</emphasis> included in the SAML Assertion (<emphasis>credential.getNameID().getValue()</emphasis> of type java.lang.String)</entry>
                        </row>
                        <row>
                            <entry>Principal</entry>
                            <entry>When forcePrincipalAsString = false AND userDetail = null (default) - <emphasis>NameID</emphasis> object included in the SAML Assertion (<emphasis>credential.getNameID()</emphasis> of type <emphasis>org.opensaml.saml2.core.NameID</emphasis>)</entry>
                        </row>
                        <row>
                            <entry>Principal</entry>
                            <entry>When forcePrincipalAsString = false AND userDetail != null - <emphasis>UserDetail</emphasis> object returned from the <emphasis>SAMLUserDetailsService</emphasis></entry>
                        </row>
                        <row>
                            <entry>Credentials</entry>
                            <entry>SAML authentication object including entity ID of local and remote entity, name ID, assertion and relay state (<emphasis>org.springframework.security.saml.SAMLCredential</emphasis>)</entry>
                        </row>
                        <row>
                            <entry>Authorities</entry>
                            <entry>Result of <emphasis>getAuthorities()</emphasis> call on the <emphasis>UserDetails</emphasis> object returned from <emphasis>SAMLUserDetailsService</emphasis>, empty list when there's no <emphasis>UserDetail</emphasis> object available.</entry>
                        </row>
                        <row>
                            <entry>Expiration</entry>
                            <entry>Value of <emphasis>SessionNotOnOrAfter</emphasis> in the SAML Assertion when avaialble, null otherwise. <emphasis>Authentication</emphasis> object will start returning false on the <emphasis>isAuthenticated()</emphasis> after the expiration time.</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table></para>
            <para>Custom implementation of the <emphasis>SAMLUserDetailsService</emphasis> can be provided as property <emphasis>userDetails</emphasis> of the <emphasis>SAMLAuthenticationProvider</emphasis>.
            Implementation can perform operation such as parsing of attributes present in the SAML Assertion, e.g.:
            <programlisting><![CDATA[package fi.schafer.test.saml;

import org.opensaml.saml2.core.Attribute;
import org.opensaml.xml.XMLObject;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.saml.SAMLCredential;
import org.springframework.security.saml.userdetails.SAMLUserDetailsService;

public class TestUserDetails implements SAMLUserDetailsService {
	@Override
	public Object loadUserBySAML(SAMLCredential cred) throws UsernameNotFoundException {
		return cred.getAttributeAsString("accountID");
	}
}]]></programlisting></para>
            <para>Population of the authentication object can be further customized by overriding of the <emphasis>getUserDetails</emphasis>, <emphasis>getPrincipal</emphasis>, <emphasis>getEntitlements</emphasis> and <emphasis>getExpirationDate</emphasis> methods
            in the <emphasis>SAMLAuthenticationProvider</emphasis>.</para>
        </section>
        <section id="configuration-authentication-assertion">
            <title>Authentication assertion</title>
            <para>Assertion used to authenticate user is stored in the <emphasis>SAMLCredential</emphasis> object under property <emphasis>authenticationAssertion</emphasis>. By default the original content (DOM) of the assertion is discarded and system only keeps an unmarshalled version which might slightly differ from the original, e.g. in white-spaces.
            In order to instruct Spring SAML to keep the assertion in the original form (keep its DOM) set property <emphasis>releaseDOM</emphasis> to <emphasis>false</emphasis> on bean <emphasis>WebSSOProfileConsumerImpl</emphasis>.</para>
            <para>Assertion can be serialized to String using the following call:
            <programlisting>XMLHelper.nodeToString(SAMLUtil.marshallMessage(credential.getAuthenticationAssertion()))</programlisting>
            </para>
        </section>
        <section id="configuration-authentication-log">
            <title>Authentication log</title>
            <para>Key events such as single sign-on and single logout initialization, success or failure can be logged for creation of an audit trail.
            A custom logger can be created by implementing interface <emphasis>org.springframework.security.saml.log.SAMLLogger</emphasis> and including its bean
            in the <emphasis>securityContext.xml</emphasis>, e.g.:<programlisting><![CDATA[<bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>]]></programlisting></para>
            <para>Two basic implementations are provided by default:
            <itemizedlist>
              <listitem>
                  <para>org.springframework.security.saml.log.SAMLEmptyLogger</para>
                  <para>Doesn't perform any logging, simply ignores all events.</para>
              </listitem>
              <listitem>
                  <para>org.springframework.security.saml.log.SAMLDefaultLogger</para>
                  <para>Logs events as INFO level messages to the log name <emphasis>org.springframework.security.saml.log.SAMLDefaultLogger</emphasis> configurable as described in <xref linkend="logging"/>. Setting
                  property <emphasis>logMessages</emphasis> to <emphasis>true</emphasis> will include content of the SAML messages as part of the log. Logging of exceptions
            can be disabled by setting <emphasis>logErrors</emphasis> to <emphasis>false</emphasis>. Fields are semicolon separated with the following values:</para>
                  <para><itemizedlist spacing="compact">
                          <listitem><para>type of SAML message (AuthNRequest, AuthNResponse, LogoutRequest or LogoutResponse)</para></listitem>
                          <listitem><para>result of processing (SUCCESS or FAILURE)</para></listitem>
                          <listitem><para>IP address of the peer who made the current request to SP</para></listitem>
                          <listitem><para>entity ID of the local SP</para></listitem>
                          <listitem><para>entity ID of the remote IDP</para></listitem>
                          <listitem><para>identifier of the authenticated user</para></listitem>
                          <listitem><para>SAML message (when logMessages is enabled)</para></listitem>
                          <listitem><para>text of the error (only for failures, when logErrors is enabled)</para></listitem>
                      </itemizedlist></para>
              </listitem>
            </itemizedlist></para>
        <para>The logger is only called for messages which can be correctly received and parsed. For errors which occur before correct parsing see <xref linkend="error-handling"/>.</para>
        </section>
    </chapter>

    <chapter id="configuration-advanced">
        <title>Advanced configuration</title>
        <section id="configuration-load-balancing">
            <title>Reverse proxies and load balancers</title>
            <para>SAML Extension can be deployed in scenarios where multiple back-end servers process SAML requests forwarded by a reverse-proxy or a load balancer.
                SSL termination proxies which communicate using an unencrypted channel between the proxy and back-end servers are also supported. In order
                to configure SAML Extension for deployment behind a load balancer or a reverse-proxy please follow these steps:
                <itemizedlist>
                    <listitem>
                        <para>Make sure that your reverse-proxy or load-balancer is configured to use sticky sessions. Information about e.g. sent requests is stored
                            within a user's HTTP session and sending of response to another back-end node would make the original request data unavailable and fail the validation.
                            Sticky session are not necessary in case only IDP-initialized SSO is used or when sessions are replicated to all nodes.</para>
                    </listitem>
                    <listitem>
                        <para>Provide information about front-end URL to the back-end servers by changing the <emphasis>contextProvider</emphasis> bean implementation in your <emphasis>securityContext.xml</emphasis>
                            to class <emphasis>org.springframework.security.saml.context.SAMLContextProviderLB</emphasis>: <programlisting><![CDATA[<bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderLB">
	<property name="scheme" value="https"/>
	<property name="serverName" value="www.myserver.com"/>
	<property name="serverPort" value="443"/>
	<property name="includeServerPortInRequestURL" value="false"/>
	<property name="contextPath" value="/spring-security-saml2-sample"/>
</bean>]]></programlisting></para>
                        <para>This setting enables the extension to correctly form all generated URLs and verify endpoints of the incoming SAML messages.</para>
                    </listitem>
                    <listitem>
                        <para>In case you use automatically generated metadata make sure to configure <emphasis>entityBaseURL</emphasis> matching the front-end URL in your <emphasis>metadataGeneratorFilter</emphasis>
                            bean: <programlisting><![CDATA[<bean id="metadataGeneratorFilter"
		class="org.springframework.security.saml.metadata.MetadataGeneratorFilter">
	<constructor-arg>
		<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
			<property name="entityBaseURL"
				value="https://www.myserver.com/spring-security-saml2-sample"/>
		</bean>
	</constructor-arg>
</bean>]]></programlisting></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section id="configuration-context-provider">
            <title>Context provider</title>
            <para>Context provider populates information about the local service provider (your application) such as entityId, role, metadata, security keys, SSL credentials
            and trust engines for verification of signatures and SSL/TLS connections. Once populated context is made available to all components participating
            in processing of the incoming or outgoing SAML messages. ContextProvider can customized to alter behavior of the SAML Extension. The default
            implementation <emphasis>org.springframework.security.saml.context.SAMLContextProviderImpl</emphasis> relies on information available in the ExtendedMetadata and
            performs the following steps for creation of the context:
            <itemizedlist>
                    <listitem>
                        <para>Locate entityId of the local SP by parsing part of the URL after <emphasis>/alias/</emphasis> (e.g. myAlias in https://www.myserver.com/saml_extension/saml/sso/alias/myAlias?idp=myIdp) and matching
                        it with property <emphasis>alias</emphasis> specified in the ExtendedMetadata. In case the URL doesn't contain any alias part the default service provider
                        configured with property <emphasis>hostedSPName</emphasis> on the <emphasis>metadata</emphasis> bean is used.</para>
                    </listitem>
                    <listitem>
                        <para>Populate credential used to decrypt data sent to this service provider. In case ExtendedMetadata specifies property <emphasis>encryptionKey</emphasis>
                        it will be used as an alias to lookup a private key from the <emphasis>keyManager</emphasis> bean. Otherwise defaultKey of the <emphasis>keyManager</emphasis> bean will be used.</para>
                    </listitem>
                    <listitem>
                        <para>Populate credential used for SSL/TLS client authentication. In case ExtendedMetadata specifies property <emphasis>tlsKey</emphasis> it will be used
                        as an alias to lookup key from <emphasis>keyManager</emphasis> bean. Otherwise no credential will be provided for client authentication.</para>
                    </listitem>
                    <listitem>
                        <para>Populate trust engine for verification of signatures. Depending on <emphasis>securityProfile</emphasis> setting in the ExtendedMetadata trust engine
                        based on either <xref linkend="configuration-security-profiles-metaiop"/> or <xref linkend="configuration-security-profiles-pkix"/> is created.</para>
                    </listitem>
                    <listitem>
                        <para>Populate trust engine for verification of SSL/TLS connections. Depending on <emphasis>sslSecurityProfile</emphasis> setting in the ExtendedMetadata
                        trust engine based on either <xref linkend="configuration-security-profiles-metaiop"/> or <xref linkend="configuration-security-profiles-pkix"/> is created.</para>
                    </listitem>
            </itemizedlist></para>
            <para>During initialization of SSO ContextProvider is also requested to provide metadata of the peer IDP. System performs these steps to locate peer IDP to use:
            <itemizedlist>
                    <listitem>
                        <para>Load parameter <emphasis>idp</emphasis> of the HttpRequest object and try to locate peer IDP by the entityId. When there's no <emphasis>idp</emphasis>
                        parameter provided system will either start IDP discovery process (when enabled in the ExtendedMetadata of the local SP) or use the default IDP specified in the
                        <emphasis>metadata</emphasis> bean.</para>
                    </listitem>
            </itemizedlist></para>
        </section>
        <section id="time-interval">
            <title>Validity intervals</title>
            <para>For security reasons system limits the time window enabling processing of SAML messages and assertions. The time window parameters can be customized with the following settings.</para>
            <para>Validity of assertions processed during the signle sign-on process is limited to 3000 seconds. Value can be customized with property <emphasis>maxAssertionTime</emphasis>
            of the <emphasis>WebSSOProfileConsumerImpl</emphasis> bean.</para>
            <para>System allows users to single sign-on for up to 7200 seconds since their initial authentication with the IDP (based on value AuthInstance of the Authentication statement).
            Some IDPs allow users to stay authenticated for longer periods than this and you might need to change the default value by setting <emphasis>maxAuthenticationAge</emphasis>
            of the <emphasis>WebSSOProfileConsumerImpl</emphasis> bean.</para>
            <para>As clocks between IDP and SP machines may not be perfectly synchronized a tolerance of 60 seconds is applied for time comparisons. The tolerance value (time skew) can be customized
            by settings property <emphasis>responseSkew</emphasis> in beans <emphasis>WebSSOProfileConsumerImpl</emphasis> and <emphasis>SingleLogoutProfileImpl</emphasis>.</para>
       <para>The following tables summarize all checks for time validity during processing of incoming SAML messages. Response skew refers to property <emphasis>responseSkew</emphasis>
       set on profile beans. Past indicates that validity window for checking of the value will be extended by <emphasis>responseSkew</emphasis> seconds to the past and correspondingly
       with the future value. Nullable values can be missing from the incoming messages.
                <table id="time-skew-overview-authnrespose">
                    <title>Time checks during processing of incoming SAML Response in WebSSO and WebSSO HoK profiles</title>
                    <tgroup cols="2">
                        <colspec colname="_1" colwidth="0.5*" align="left"/>
                        <colspec colname="_2" colwidth="0.5*" align="left"/>
                        <tbody>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.issueInstant</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>responseSkew (past + future)</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>No</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Throws SAMLException</entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time when SAML response message was created.</entry>
                            </row>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.assertion.issueInstant</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>responseSkew (past + future) + maxAssertionTime (future)</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>No</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Throws SAMLException</entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time when SAML assertion was created, allows validity extension as assertion might be
                                    re-used by the caller.
                                </entry>
                            </row>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.assertion.subject.subjectConfirmation.notOnOrAfter
                                    </emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>responseSkew (future)</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>No</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Throws SAMLException</entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time when subject can no longer be confirmed.</entry>
                            </row>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.assertion.authnStatement.authnInstant</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>responseSkew (past + future) + maxAuthenticationAge (future)</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>No</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Throws CredentialsExpiredException</entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time when user authenticated to IDP, typically differs from time or response or
                                    assertion creation time.
                                </entry>
                            </row>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.assertion.authnStatement.sessionNotOnOfAfter</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>no skew</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>Yes</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Throws CredentialsExpiredException</entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time when user's session expires and requires re-authentication, sessions are
                                    typically valid for longer period and therefore do not suffer from time synchronization
                                    problems.
                                </entry>
                            </row>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.assertion.condition.notBefore</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>responseSkew (past)</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>Yes</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Throws SAMLException</entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time limit on validity of assertion.</entry>
                            </row>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.assertion.condition.notOnOrAfter</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>responseSkew (future)</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>Yes</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Throws SAMLException</entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time limit on validity of assertion.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table id="time-skew-overview-logoutrequest">
                    <title>Time checks during processing of incoming SAML LogoutRequest in Single Logout profile</title>
                    <tgroup cols="2">
                        <colspec colname="_1" colwidth="0.5*" align="left"/>
                        <colspec colname="_2" colwidth="0.5*" align="left"/>
                        <tbody>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.issueInstant</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>responseSkew (past + future)</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>No</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Sends LogoutResponse with error Status
                                    "urn:oasis:names:tc:SAML:2.0:status:Requester"
                                </entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time when SAML LogoutRequest message was created.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table id="time-skew-overview-logoutresponse">
                    <title>Time checks during processing of incoming SAML LogoutResponse in Single Logout profile</title>
                    <tgroup cols="2">
                        <colspec colname="_1" colwidth="0.5*" align="left"/>
                        <colspec colname="_2" colwidth="0.5*" align="left"/>
                        <tbody>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.issueInstant</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>responseSkew (past + future)</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>No</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Throws SAMLException</entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time when SAML LogoutResponse message was created.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <table id="time-skew-overview-artifacteresponse">
                    <title>Time checks during processing of incoming SAML ArtifactResponse in Artifact Resolution profile
                    </title>
                    <tgroup cols="2">
                        <colspec colname="_1" colwidth="0.5*" align="left"/>
                        <colspec colname="_2" colwidth="0.5*" align="left"/>
                        <tbody>
                            <row>
                                <entry namest="_1" nameend="_2">
                                    <emphasis role="strong">response.issueInstant</emphasis>
                                </entry>
                            </row>
                            <row>
                                <entry>Applied skew:</entry>
                                <entry>responseSkew (past + future)</entry>
                            </row>
                            <row>
                                <entry>Nullable:</entry>
                                <entry>No</entry>
                            </row>
                            <row>
                                <entry>Fails with:</entry>
                                <entry>Throws MessageDecodingException</entry>
                            </row>
                            <row>
                                <entry>Description:</entry>
                                <entry>Time when SAML LogoutResponse message was created.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
        </section>
        <section id="enhanced-client">
            <title>Enhanced client/proxy</title>
            <para>Support for enhanced client/proxy can be configured using property <emphasis>ecpEnabled</emphasis> of the service provider's extended metadata. Once enabled, ECP profile is automatically activated with requests containing HTTP headers
            <emphasis>Accept: application/vnd.paos+xml</emphasis> and <emphasis>PAOS: ver='urn:liberty:paos:2003-08'; 'urn:oasis:names:tc:SAML:2.0:profiles:SSO:ecp'</emphasis>. Binding used to server ECP profile is always automatically set to PAOS.</para>
            <para>ECP can be enabled in combination with the automatic metadata generation using the following settings: <programlisting><![CDATA[<bean class="org.springframework.security.saml.metadata.MetadataGenerator">
	<property name="extendedMetadata">
		<bean class="org.springframework.security.saml.metadata.ExtendedMetadata">
			<property name="ecpEnabled" value="true"/>
		</bean>
	</property>
</bean>]]></programlisting>
            </para>
        </section>
        <section id="endpoint-url">
            <title>Endpoint URLs</title>
            <para>By default Spring SAML uses the following endpoints, which can optionally also contain information about <link linkend="configuration-entity-alias">entity alias</link> of the local Service Provider:
                <table id="endpoint-url-overview">
                <title>Endpoint overview</title>
                <tgroup cols="3">
                <colspec colname="_1" colwidth="0.6*" align="left"/>
                <colspec colname="_2" colwidth="0.8*" align="left"/>
                <colspec colname="_2" colwidth="0.8*" align="left"/>
                <thead>
                    <row>
                        <entry>Profile</entry>
                        <entry>Binding</entry>
                        <entry>Endpoint</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Web Single Sign-on</entry>
                        <entry>HTTP-POST, HTTP-Artifact, PAOS</entry>
                        <entry>scheme://server:port/contextPath/saml/SSO</entry>
                    </row>
                    <row>
                        <entry>Web Single Sign-on Holder of Key</entry>
                        <entry>HTTP-POST, HTTP-Artifact</entry>
                        <entry>scheme://server:port/contextPath/saml/HoKSSO</entry>
                    </row>
                    <row>
                        <entry>Single Logout</entry>
                        <entry>HTTP-POST, HTTP-Redirect</entry>
                        <entry>scheme://server:port/contextPath/saml/SingleLogout</entry>
                    </row>
                </tbody>
                </tgroup>
                </table>
            </para>
            <para>The default URLs can be altered with these steps:
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>change property <emphasis>filterProcessesUrl</emphasis> on the corresponding processing bean (<emphasis>samlWebSSOProcessingFilter</emphasis>, <emphasis>samlWebSSOHoKProcessingFilter</emphasis>, <emphasis>samlLogoutProcessingFilter</emphasis> or <emphasis>samlIDPDiscovery</emphasis>) to the new URL, for example <emphasis>/samlResponse</emphasis></para>
                    </listitem>
                    <listitem>
                        <para>update the <emphasis>samlFilter</emphasis> bean and make sure that the modified processing filter is mapped to the correct pattern, for example <emphasis>/samlResponse/**</emphasis>, the <emphasis>/**</emphasis> part is only needed in case you're using the entity alias feature</para>
                    </listitem>
                    <listitem>
                        <para>re-generate metadata for your service provider, in case you are using <link linkend="configuration-metadata-sp-generation">automatic metadata generator</link> the endpoints will be automatically generated with the new URLs</para>
                    </listitem>
                    <listitem>
                        <para>in case you are using <link linkend="configuration-metadata-sp-import">pre-configured metadata</link> you can perform changes manually in your existing metadata file</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>Endpoints of filters <emphasis>samlEntryPoint</emphasis>, <emphasis>samlLogoutFilter</emphasis> and <emphasis>metadataDisplayFilter</emphasis> can be changed using the same process and without need to re-generate the metadata.</para>
        </section>
        <section id="artifact-resolution">
            <title>Artifact resolution</title>
            <para>Usage of HTTP-Artifact binding requires Spring SAML to make a direct SOAP call to the Identity Provider. Sometimes it's necessary to configure correct HTTP proxy for the call. This can be achieved
            by setting property <emphasis>hostConfiguration</emphasis> on <emphasis>HttpClient</emphasis> plugged to the <emphasis>artifactBinding</emphasis> bean. The following configuration demonstrates creation of the bean
            for the <emphasis>hostConfiguration</emphasis>: <programlisting><![CDATA[<bean id="hostConfiguration" class="org.apache.commons.httpclient.HostConfiguration"/>
<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	<property name="targetObject" ref="hostConfiguration"/>
	<property name="targetMethod" value="setProxy"/>
	<property name="arguments">
		<list>
			<value>testHost</value>
			<value>8080</value>
		</list>
	</property>
</bean>]]></programlisting>
            </para>
            <para>Another common use-case is situation when artifact resolution endpoint at IDP is secured using HTTP-Basic authentication. Authentication can be configured by setting 
            <emphasis>HTTPClient's</emphasis> property <emphasis>state</emphasis> with the following bean: <programlisting><![CDATA[<bean id="state" class="org.apache.commons.httpclient.HttpState"/>
<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	<property name="targetObject" ref="state"/>
	<property name="targetMethod" value="setCredentials"/>
	<property name="arguments">
		<list>
			<util:constant static-field="org.apache.commons.httpclient.auth.AuthScope.ANY"/>
			<bean class="org.apache.commons.httpclient.UsernamePasswordCredentials">
				<constructor-arg value="username"/>
				<constructor-arg value="password"/>
			</bean>
		</list>
	</property>
</bean>]]></programlisting>
            </para>
        </section>
    </chapter>

	<!-- TODO
	Message storage
	Using the HoK profile
	-->
  
</part>